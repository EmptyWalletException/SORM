package com.kingguanzhang.sorm.utils;import com.kingguanzhang.sorm.bean.ColumnInfo;import com.kingguanzhang.sorm.bean.JavaFieldGetSet;import com.kingguanzhang.sorm.bean.TableInfo;import com.kingguanzhang.sorm.core.DBManager;import com.kingguanzhang.sorm.core.MySqlTypeConvertor;import com.kingguanzhang.sorm.core.TableContext;import com.kingguanzhang.sorm.core.TypeConvertor;import java.io.BufferedWriter;import java.io.File;import java.io.FileWriter;import java.io.IOException;import java.util.ArrayList;import java.util.List;import java.util.Map;public class JavaFileUtils {    /*    * On the basis of field info to create java property info ,for example:varchar username --> private String username;    * And also will create corresponding set/get method source;    * @param column ,Field info;    * @param convertor ,Type converter;    * @return ,java property and set/get method source;    * */    public  static JavaFieldGetSet createFieldGetSetSRC(ColumnInfo column, TypeConvertor convertor) {        JavaFieldGetSet jfgs = new JavaFieldGetSet();        String javaFieldType = convertor.databaseType2JavaType(column.getDataType());        jfgs.setFieldInfo("\tprivate "+javaFieldType+" "+column.getName()+";\n ");        //Create get method source,for example: public int getPhoneNumble(){ return 123;}        StringBuilder getSrc = new StringBuilder();        getSrc.append("\tpublic "+javaFieldType+" get"+StringUtils.firstChar2UpperCase(column.getName())+"(){\n");        getSrc.append("\t\treturn "+column.getName()+";\n");        getSrc.append("\t}\n");        jfgs.setGetInfo(getSrc.toString());//Once write wrong code:jfgs.setFieldInfo();        //Create set method source,for example: public int setPhoneNumble(){this.phoneNumble = phoneNumble;return -1;}        StringBuilder setSrc = new StringBuilder();        //Once write wrong code:" set" --> " get";        setSrc.append("\tpublic "+javaFieldType+" set"+StringUtils.firstChar2UpperCase(column.getName())+"(");        setSrc.append(javaFieldType+" "+column.getName()+"){\n");        setSrc.append("\t\tthis."+column.getName()+"="+column.getName()+";\n");        setSrc.append("\t\treturn "+column.getName()+";\n");        setSrc.append("\t}\n");        jfgs.setSetInfo(setSrc.toString());//Once write wrong code:jfgs.setFieldInfo();        return jfgs;    }    /*    * On the basis of table info to create java class source;    * @param tableInfo ,table info;    * @param convertor , Type converter;    * @retrun ,Java class source;    * */    public static String createJavaSrc(TableInfo tableInfo,TypeConvertor convertor){        Map<String,ColumnInfo> columns = tableInfo.getColumns();        List<JavaFieldGetSet> javaFields = new ArrayList<JavaFieldGetSet>();        for(ColumnInfo c:columns.values()){            javaFields.add(createFieldGetSetSRC(c,convertor));        }        StringBuilder src = new StringBuilder();        //Create package statement;        src.append("package "+ DBManager.getConf().getPoPackage()+";\n");        //Create import statement;        src.append("import java.sql.*;\n");        src.append("import java.util.*;\n");        //Create class statement;        src.append("public class "+StringUtils.firstChar2UpperCase(tableInfo.getTname())+"{\n");        //Create property list;        for(JavaFieldGetSet f:javaFields){            src.append(f.getFieldInfo());        }        src.append("\n");        //Create get method list;        for(JavaFieldGetSet f:javaFields){            src.append(f.getGetInfo());        }        src.append("\n");        //Create set method list;        for(JavaFieldGetSet f:javaFields){            src.append(f.getSetInfo());        }        src.append("\n");        //Create end symbol }        src.append("}\n");        System.out.println(src);        return src.toString();    }    public static void createJavaPOFile(TableInfo tableInfo,TypeConvertor convertor){        String src = createJavaSrc(tableInfo,convertor);        String srcPath = DBManager.getConf().getSrcPath()+"\\";        /*        *Notice this method:   public String replaceAll(@NotNull String regex,@NotNull String replacement)        *If we want replace "." with "\" in the srcpath like "C:\xxx.yyy.zzz" --> "C:\xxx\yyy\zzz".        *We must use "\." to convert,is mean ".",and this have regex,so wo need user "\\." ,so there have twice convert.        *In java must use"\\",because this hava regex,so we need use "\\\\" to achieve twice convert.also we can use "/",this solution is simpler.        */        String packagePath = DBManager.getConf().getPoPackage().replaceAll("\\.","\\\\");        //Once write a wrong code: in "db.properties",in "srcPath = C:/Users/Administrator/Desktop/",do not use "\" replace "/",or the file path will become "C:UsersAdministratorDesktop".        File f = new File(srcPath+packagePath);        System.out.println("*****Debug*****"+f.getAbsolutePath()+"*****Debug*****");        if(!f.exists()){            f.mkdirs();        }        BufferedWriter bw = null;        try {            bw = new BufferedWriter(new FileWriter(f.getAbsoluteFile()+"/"+StringUtils.firstChar2UpperCase(tableInfo.getTname()+".java")));            bw.write(src);            System.out.println("*** Create table:"+tableInfo.getTname()+" corresponding java class:"+StringUtils.firstChar2UpperCase(tableInfo.getTname())+".java succeed ***");        } catch (IOException e) {            e.printStackTrace();        }finally {            try {                if (null != bw){                  bw.close();                }            } catch (IOException e) {                e.printStackTrace();            }        }    }    //Debug;    public static void main(String[] args) {       /*        ColumnInfo ci = new ColumnInfo("username","varchar",0);        JavaFieldGetSet j = createFieldGetSetSRC(ci,new MySqlTypeConvertor());        System.out.println(j);        */        //SQLException: The url cannot be null;(DBManager.java in 32 line),because "URL" was written into "url"      /*        Map<String,TableInfo> map = TableContext.tables;        TableInfo t = map.get("emp");        createJavaSrc(t,new MySqlTypeConvertor());       */        Map<String,TableInfo> map = TableContext.tables;        int i = 1;        for(TableInfo t:map.values()){            createJavaPOFile(t,new MySqlTypeConvertor());            System.out.println("*** Table NO."+i+" create succeed ***");        }    }}